#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/io/ply_io.h>
#include <pcl/common/transforms.h>
#include <pcl/common/common.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/sample_consensus/sac_model_circle.h>
#include <pcl/filters/passthrough.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/filters/project_inliers.h>
#include <pcl/segmentation/extract_clusters.h>
#include <pcl/visualization/pcl_visualizer.h>//可视化
#include <pcl/features/moment_of_inertia_estimation.h>
#include <Eigen/Eigenvalues>
#include <fstream> 
using namespace std;

//获取PCA
pcl::PointCloud<pcl::PointXYZ>::Ptr get_pca(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud)
{
    Eigen::Vector4f pcaCentroid;
    pcl::compute3DCentroid(*cloud, pcaCentroid);
    Eigen::Matrix3f covariance;
    pcl::computeCovarianceMatrixNormalized(*cloud, pcaCentroid, covariance);
    Eigen::SelfAdjointEigenSolver<Eigen::Matrix3f> eigen_solver(covariance, Eigen::ComputeEigenvectors);
    Eigen::Matrix3f eigenVectorsPCA = eigen_solver.eigenvectors();
    Eigen::Vector3f eigenValuesPCA = eigen_solver.eigenvalues();

    Eigen::Matrix4f transform(Eigen::Matrix4f::Identity());
    transform.block<3, 3>(0, 0) = eigenVectorsPCA.transpose();
    transform.block<3, 1>(0, 3) = -1.0f * (transform.block<3, 3>(0, 0)) * (pcaCentroid.head<3>());

    pcl::PointCloud<pcl::PointXYZ>::Ptr transformedCloud(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::transformPointCloud(*cloud, *transformedCloud, transform);

    return transformedCloud;
}
//直通滤波
pcl::PointCloud<pcl::PointXYZ>::Ptr pcl_filter_passthrough(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_in,
    float min, float max, string axis, bool is_save)
{
    pcl::PassThrough<pcl::PointXYZ> pass;//设置滤波器对象
    //参数设置
    pass.setInputCloud(cloud_in);
    pass.setFilterFieldName(axis);
    pass.setFilterLimits(min, max);//区间设置
    pass.setFilterLimitsNegative(is_save);//设置为保留还是去除（true是去除上述坐标范围内的点）

    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_out(new pcl::PointCloud<pcl::PointXYZ>());
    pass.filter(*cloud_out);

    return cloud_out;
}


//投影滤波
pcl::PointCloud<pcl::PointXYZ>::Ptr pcl_filter_projection(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_in,
    float paraA, float paraB, float paraC, float paraD)
{

    pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients());
    coefficients->values.resize(4);
    coefficients->values[0] = paraA;
    coefficients->values[1] = paraB;
    coefficients->values[2] = paraC;
    coefficients->values[3] = paraD;

    pcl::ProjectInliers<pcl::PointXYZ> proj;
    proj.setModelType(pcl::SACMODEL_PLANE);
    proj.setInputCloud(cloud_in);
    proj.setModelCoefficients(coefficients);
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_projected(new pcl::PointCloud<pcl::PointXYZ>);
    proj.filter(*cloud_projected);

    return cloud_projected;

}

Eigen::VectorXf getCircle2D(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud)
{

    pcl::SampleConsensusModelCircle2D<pcl::PointXYZ>::Ptr model_circle2D(new pcl::SampleConsensusModelCircle2D<pcl::PointXYZ>(cloud));	//选择拟合点云与几何模型
    pcl::RandomSampleConsensus<pcl::PointXYZ> ransac(model_circle2D);	//创建随机采样一致性对象
    ransac.setDistanceThreshold(0.5);	//设置距离阈值，与模型距离小于0.01的点作为内点
    ransac.setMaxIterations(10000);		//设置最大迭代次数
    ransac.computeModel();				//执行模型估计

    vector<int> inliers;				//存储内点索引的向量
    ransac.getInliers(inliers);			//提取内点对应的索引

    /// 根据索引提取内点
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_circle(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::copyPointCloud<pcl::PointXYZ>(*cloud, inliers, *cloud_circle);

    /// 输出模型参数(x-x0)^2 + (y-y0)^2 = r^2;
    Eigen::VectorXf coefficient;
    ransac.getModelCoefficients(coefficient);
    //cout << "二维圆方程为：\n"
    //    << "(x - " << coefficient[0] << ")^2 + "
    //    << "(y - " << coefficient[1] << ")^2 = "
    //    << coefficient[2] << "^2"
    //    << endl;


    return coefficient;

}
//欧式聚类
std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> pcl_segmentation_ec(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_in, float p1, float p2, float p3)
{
    //kd树
    pcl::search::KdTree<pcl::PointXYZ>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZ>);
    tree->setInputCloud(cloud_in);

    std::vector<pcl::PointCloud<pcl::PointXYZ>::Ptr> result;
    std::vector<pcl::PointIndices> cluster_indices;
    pcl::EuclideanClusterExtraction<pcl::PointXYZ> ec;
    ec.setClusterTolerance(p1); //表示聚类的距离
    ec.setMinClusterSize(p2);    //设置一个聚类需要的最少点数目
    ec.setMaxClusterSize(p3);  //设置一个聚类需要的最大点数目
    ec.setSearchMethod(tree);     //设置点云的搜索机制
    ec.setInputCloud(cloud_in); //设置原始点云
    ec.extract(cluster_indices);  //从点云中提取聚类

    //依据索引提取点云
    for (std::vector<pcl::PointIndices>::const_iterator it = cluster_indices.begin(); it != cluster_indices.end(); ++it)
    {
        pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_cluster(new pcl::PointCloud<pcl::PointXYZ>);
        for (std::vector<int>::const_iterator pit = it->indices.begin(); pit != it->indices.end(); pit++)
            cloud_cluster->points.push_back(cloud_in->points[*pit]); //*
        cloud_cluster->width = cloud_cluster->points.size();
        cloud_cluster->height = 1;
        cloud_cluster->is_dense = true;
        result.push_back(cloud_cluster);
    }
    return result;
}


//获取obb
void GetObb(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud,
    Eigen::Vector3f& Position, Eigen::Quaternionf& Quat,
    pcl::PointXYZ& min_point_OBB, pcl::PointXYZ& max_point_OBB)
{

    pcl::MomentOfInertiaEstimation <pcl::PointXYZ> feature_extractor;
    feature_extractor.setInputCloud(cloud);
    feature_extractor.compute();
    std::vector <float> moment_of_inertia;
    std::vector <float> eccentricity;


    pcl::PointXYZ position_OBB;
    Eigen::Matrix3f rotational_matrix_OBB;
    float major_value, middle_value, minor_value;
    Eigen::Vector3f major_vector, middle_vector, minor_vector;
    Eigen::Vector3f mass_center;
    feature_extractor.getMomentOfInertia(moment_of_inertia);//计算出的惯性矩
    feature_extractor.getEccentricity(eccentricity);//计算出的偏心率
    feature_extractor.getOBB(min_point_OBB, max_point_OBB, position_OBB, rotational_matrix_OBB);
    feature_extractor.getEigenValues(major_value, middle_value, minor_value);//三个特征值
    feature_extractor.getEigenVectors(major_vector, middle_vector, minor_vector);//三个特征向量
    feature_extractor.getMassCenter(mass_center);//计算质心

    Eigen::Vector3f position(position_OBB.x, position_OBB.y, position_OBB.z);
    Eigen::Quaternionf quat(rotational_matrix_OBB);

    Position = position;
    Quat = quat;
    //pcl::visualization::PCLVisualizer viewer("viewer");
    //viewer.addPointCloud(cloud, "1");


    //viewer.spin();

}

static bool cmp(const vector<int>& a, const vector<int>& b) {
    return a.back() < b.back();
}



int main(int argc, char** argv)
{
    //加载点云
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::io::loadPLYFile("614daseg.ply", *cloud);

    //计算PCA
    auto transformedCloud = get_pca(cloud);
    for (int i = 0; i < transformedCloud->size(); i++)
    {
        transformedCloud->points[i].x *= 1000;
        transformedCloud->points[i].y *= 1000;
        transformedCloud->points[i].z *= 1000;
    }

    //获取zmin zmax
    pcl::io::savePLYFile("pca.ply", *transformedCloud);
    pcl::PointXYZ minpt, maxpt;
    pcl::getMinMax3D(*transformedCloud, minpt, maxpt);


    double n = 100;
    double RangeOfZ = maxpt.z - minpt.z;
    double step = RangeOfZ / n;

    //所需求目标点云
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_tgt(new pcl::PointCloud<pcl::PointXYZ>);
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_rst(new pcl::PointCloud<pcl::PointXYZ>);

    for (int val = 0; val < n; val++)
    {

        auto cloud_pt = pcl_filter_passthrough(transformedCloud, minpt.z + (double)val * step, minpt.z + (double)(val + 1) * step, "z", false);
        auto cloud_pro = pcl_filter_projection(cloud_pt, 0, 0, 1, 0);
        auto CircleParas = getCircle2D(cloud_pro);


        for (int i = 0; i < cloud_pt->size(); i++)
        {
            double x = cloud_pt->points[i].x;
            double y = cloud_pt->points[i].y;
            double dis = sqrt((x - CircleParas[0]) * (x - CircleParas[0]) + (y - CircleParas[1]) * (y - CircleParas[1]));
            if (dis < CircleParas[2] - 2.5)
            {
                cloud_tgt->push_back(cloud_pt->points[i]);
            }
        }
        //*cloud_rst += *cloud_pt;
    }

    //通过欧式聚类确定
    auto result = pcl_segmentation_ec(cloud_tgt, 2, 1000, 1000000);

    //单一数据冗余剔除
    std::vector<pcl::PointCloud<pcl::PointXYZ>> cloud_vec;
    for (int i = 0; i < result.size(); i++)
    {
        pcl::PointXYZ minpt1, maxpt1;
        pcl::getMinMax3D(*result[i], minpt1, maxpt1);
        if (maxpt1.z - minpt1.z > 35)
        {
            cloud_vec.push_back(*result[i]);

            pcl::io::savePLYFileBinary(to_string(i) + ".ply", *result[i]);
        }
    }

    vector<vector<int>> points;

    for (int i = 0; i < cloud_vec.size(); i++)
    {
        vector<int> tmp;
        tmp = { i,(int)cloud_vec[i].size() };
        points.push_back(tmp);
    }
    sort(points.begin(), points.end(), cmp);





    //第一视图可视化
    pcl::visualization::PCLVisualizer viewer("viewer");

    viewer.addPointCloud(transformedCloud);
    for (int i = points.size() - 1; i >= 0; i--)
    {
        Eigen::Vector3i color_arr = pcl::GlasbeyLUT::at(i).getRGBVector3i();
        pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ>seg_color(cloud_vec[points[i][0]].makeShared(), color_arr[0], color_arr[1], color_arr[2]);
        viewer.addPointCloud(cloud_vec[points[i][0]].makeShared(), seg_color, to_string(i));
        viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, to_string(i));

    }


    //第二视图可视化
    pcl::visualization::PCLVisualizer sviewer("sviewer");
    //sviewer.setBackgroundColor(255,255,255);



    int count = 1;
    for (int i = points.size() - 1; i >= 0; i--)
    {
        Eigen::Vector3f Position;
        Eigen::Quaternionf Quat;

        pcl::PointXYZ min_point_OBB;
        pcl::PointXYZ max_point_OBB;
        GetObb(cloud_vec[points[i][0]].makeShared(), Position, Quat, min_point_OBB, max_point_OBB);



        Eigen::Vector3i color_arr = pcl::GlasbeyLUT::at(i).getRGBVector3i();
        pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ>seg_color(cloud_vec[points[i][0]].makeShared(), color_arr[0], color_arr[1], color_arr[2]);
        sviewer.addPointCloud(cloud_vec[points[i][0]].makeShared(), seg_color, to_string(i) + "sec");
        //viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, to_string(i));

        sviewer.addCube(Position, Quat, max_point_OBB.x - min_point_OBB.x, max_point_OBB.y - min_point_OBB.y, max_point_OBB.z - min_point_OBB.z, to_string(i) + "OBB");
        sviewer.setShapeRenderingProperties(pcl::visualization::PCL_VISUALIZER_OPACITY, 0.1, to_string(i) + "OBB");
        sviewer.setShapeRenderingProperties(pcl::visualization::PCL_VISUALIZER_LINE_WIDTH, 4, to_string(i) + "OBB");
        sviewer.setRepresentationToWireframeForAllActors();//将所有actor的可视化表示更改为线框表示

        string s = "id: " + to_string(count) + "\nlength: " + to_string(2 * max_point_OBB.x / 1000) + "\nheight: " + to_string(2 * max_point_OBB.y / 1000) + "\nwidth: " + to_string(2 * max_point_OBB.z / 1000);
        pcl::PointXYZ position;
        position.x = Position(0);
        position.y = Position(1);
        position.z = Position(2);
        sviewer.addText3D(s, position, 5, 1, 1, 1, to_string(i) + "text");  // 将Text3D添加到“Text”形状里
        count++;

    }

    //第三视图可视化




    viewer.spin();
    sviewer.spin();
    // 打开一个TXT文件以写入标签信息
    std::ofstream label_file("label.txt");
    if (!label_file.is_open())
    {
        std::cerr << "Failed to open labels.txt for writing." << std::endl;
        return -1;
    }

    count = 1;
    pcl::PointXYZ max_point_OBB;

    for (int i = points.size() - 1; i >= 0; i--)
    {

        string label = "id: " + std::to_string(count) + "\nlength: " +
            std::to_string(2 * max_point_OBB.x / 1000) + "\nheight: " +
            std::to_string(2 * max_point_OBB.y / 1000) + "\nwidth: " +
            std::to_string(2 * max_point_OBB.z / 1000);


        // 写入标签信息到TXT文件
       // label_file << "Cluster " << i << " Label:\n" << label << "\n\n";

        count++;
    }

    // 关闭TXT文件
    label_file.close();


    system("pause");
    return 0;

}
